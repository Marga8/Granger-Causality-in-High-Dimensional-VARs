## Simulate Stationary time series from specific VAR(1) DGPs:
## DGP1: Sparse DGP
## DGP2: Non-Sparse DGP
## DGP3: Block-diagonal DGP

## Note: Vcov matrix is assumed to be the Identity.
## To simulate TS with different vcov matrices see file: "TS simulations with Vcov matrix"

## References: 
## Hecq,A., Margaritella,L., Smeekes,S. "Granger Causality Testing in High-Dimensional VARs:a Post-Double-Selection Procedure
## Callot,L., Kock,AB. "Oracle inequalities for high-dimensional vector autoregressions"

#############################################################################################################################
                                                      ####### DGP1 #######
SparseDGP=function(T_,g){ 
  coef1<-diag(0.5,nrow=g,ncol=g)
  coef1[2,1]<-0.2    #for power, comment out for simulating size
  presample<-1
  T_new<-T_+presample
  eps1<-rnorm(ncol(coef1)*T_new,0,1)
  eps<-matrix(eps1,nrow=ncol(coef1))
  X <- matrix(nrow=ncol(coef1),ncol=T_new)
  X[,1] <- eps[,1]
  for (t in 2:T_new) {
    X[,t] <- (coef1)%*%X[,t-1]+eps[,t]
  }
  finseries<- X[,(1+presample):T_new]
  ########## (Optional) Plotting ##########
  ts.plot(t(finseries),col=c("red","blue","orange","purple","yellow","green","pink","black","brown","darkgrey"),lwd=2)
  abline(h=0,col="black")
  ######################
  return(t(finseries))
}

#############################################################################################################################
                                                      ####### DGP2 #######

NonSparseDGP=function(T_,g){ 
  coef1<-matrix(NA,nrow=g,ncol=g)
  for (i in 1:g) {
    for (j in 1:g) {
      coef1[i,j]<-((-1)^(abs(i-j)))*(0.4^(abs(i-j)+1))
    }
  }
  coef1[2,1]<-0  #for size, comment out for simulating power
  presample<-1
  T_new<-T_+presample
  eps1<-rnorm(ncol(coef1)*T_new,0,1)
  eps<-matrix(eps1,nrow=ncol(coef1))
  X <- matrix(nrow=ncol(coef1),ncol=T_new)
  X[,1] <- eps[,1]
  for (t in 2:T_new) {
    X[,t] <- (coef1)%*%X[,t-1]+eps[,t]
  }
  finseries<- X[,(1+presample):T_new]
  ########## (Optional) Plotting ##########
  ts.plot(t(finseries),col=c("red","blue","orange","purple","yellow","green","pink","black","brown","darkgrey"),lwd=2)
  abline(h=0,col="black")
  ######################
  return(t(finseries))
}


#############################################################################################################################
                                                      ####### DGP3 #######

BlockDiagDGP=function(T_,g){ 
  #if g=10 k=2, if g=20, k=4, if g=50, k=10, if g=100, k=20
  if(g==10){
    k=2
  }
  if(g==20){
    k=4
  }
  if(g==50){
    k=10
  }
  if(g==100){
    k=20
  }
  submatr1<-lapply(seq_len(k),function(X) (matrix(0.15,ncol=5,nrow=5)))
  #submatr2<-lapply(seq_len(k),function(X) (matrix(-0.1,ncol=5,nrow=5))) #comment out for simulating VAR(2)
  coef1<-do.call(adiag,submatr1)
  #coef2<-do.call(adiag,submatr2).  #comment out for simulating VAR(2)
  coef1[2,1]<-0      #for size, comment out for simulating power
  #coef2[2,1]<-0     #for size. #comment out for simulating VAR(2)
  presample<-1
  T_new<-T_+presample
  eps1<-rnorm(ncol(coef1)*T_new,0,1)
  eps<-matrix(eps1,nrow=ncol(coef1))
  X <- matrix(nrow=ncol(coef1),ncol=T_new)
  X[,1]=eps[,1]
  for (t in 2:T_new){
    X[,t]<-(coef1%*%as.matrix(X[,t-1])+eps[,t])
  }
  finseries<- X[,(1+presample):T_new]
   ##########(Optional) Plotting##########
  ts.plot(t(finseries),col=c("red","blue","orange","purple","yellow","green","pink","black","brown","darkgrey"),lwd=2)
  abline(h=0,col="black")
  ######################
  return(t(finseries))
}

