ic_glmnetboundT = function (x, y, crit=c("bic","ebic","aic","aicc","hqc"),...)
{
  if (is.matrix(x) == FALSE) {
    x = as.matrix(x)
  }
  if (is.vector(y) == FALSE) {
    y = as.vector(y)
  }
  crit=match.arg(crit)
  n=length(y)
  model = glmnet(x = x, y = y, ...)
  coef = coef(model)
  coefmat=as.matrix(coef)
  coeff<-(coefmat[,colSums(coefmat[2:nrow(coefmat),] != 0)<=(floor(nrow(x)/2))])
  lambda = model$lambda #trim after legth of coeff
  lambdaa = lambda[1:ncol(coeff)]
  df = colSums(coeff[2:nrow(coeff),] != 0)
  ## trim x same col length as coeff
  # to insert: if ncol(xcontnogc)<ncol(coeff) then xtrim<-xcontnogc, ytrim<-ycont1
  #xtrim<-x[1:ncol(coeff),]
  #ytrim<-y[1:ncol(coeff)]
  coeff<-as(coeff, "dgCMatrix")
  #yhat=cbind(1,xtrim)%*%coeff  #x*beta_hat
  #residuals = (ytrim- yhat)
  yhat=cbind(1,x)%*%coeff
  residuals = (y- yhat)
  mse = colMeans(residuals^2)
  sse = colSums(residuals^2)
  
  #defining criteria
  nvar = df + 1
  bic = n*log(mse)+nvar*log(n)
  ebic= n*log(mse)+nvar*log(n)+(2*nvar*0.5*log(ncol(x)))
  aic = n*log(mse)+2*nvar
  aicc = aic+(2*nvar*(nvar+1))/(n-nvar-1)
  hqc = n*log(mse)+2*nvar*log(log(n))
  
  sst = (n-1)*var(y)
  r2 = 1 - (sse/sst) #r square
  adjr2 = (1 - (1 - r2) * (n - 1)/(nrow(x) - nvar - 1)) #adj r square
  
  crit=switch(crit,bic=bic,ebic=ebic,aic=aic,aicc=aicc,hqc=hqc)
  
  selected=best.model = which(crit == min(crit))
  
  ic=c(bic=bic[selected],ebic=ebic[selected],aic=aic[selected],aicc=aicc[selected],hqc=hqc[selected])
  
  result=list(coefficients=coef[,selected],ic=ic,lambda = lambda[selected], nvar=nvar[selected],
              glmnet=model,residuals=residuals[,selected],fitted.values=yhat[,selected],ic.range=crit, call = match.call())
  
  class(result)="ic.glmnet"
  return(result)
}
